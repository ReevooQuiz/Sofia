// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SKFE396/qa-service/dao (interfaces: QaDao)

// Package mock is a generated GoMock package.
package mock

import (
	dao "github.com/SKFE396/qa-service/dao"
	entity "github.com/SKFE396/qa-service/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQaDao is a mock of QaDao interface
type MockQaDao struct {
	ctrl     *gomock.Controller
	recorder *MockQaDaoMockRecorder
}

// MockQaDaoMockRecorder is the mock recorder for MockQaDao
type MockQaDaoMockRecorder struct {
	mock *MockQaDao
}

// NewMockQaDao creates a new mock instance
func NewMockQaDao(ctrl *gomock.Controller) *MockQaDao {
	mock := &MockQaDao{ctrl: ctrl}
	mock.recorder = &MockQaDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQaDao) EXPECT() *MockQaDaoMockRecorder {
	return m.recorder
}

// AddQuestion mocks base method
func (m *MockQaDao) AddQuestion(arg0 dao.TransactionContext, arg1 int64, arg2, arg3, arg4 string, arg5 []string, arg6, arg7 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuestion", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuestion indicates an expected call of AddQuestion
func (mr *MockQaDaoMockRecorder) AddQuestion(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuestion", reflect.TypeOf((*MockQaDao)(nil).AddQuestion), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// Begin mocks base method
func (m *MockQaDao) Begin(arg0 bool) (dao.TransactionContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", arg0)
	ret0, _ := ret[0].(dao.TransactionContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin
func (mr *MockQaDaoMockRecorder) Begin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockQaDao)(nil).Begin), arg0)
}

// CheckQuestionOwner mocks base method
func (m *MockQaDao) CheckQuestionOwner(arg0 dao.TransactionContext, arg1, arg2 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckQuestionOwner", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckQuestionOwner indicates an expected call of CheckQuestionOwner
func (mr *MockQaDaoMockRecorder) CheckQuestionOwner(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckQuestionOwner", reflect.TypeOf((*MockQaDao)(nil).CheckQuestionOwner), arg0, arg1, arg2)
}

// Commit mocks base method
func (m *MockQaDao) Commit(arg0 *dao.TransactionContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockQaDaoMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockQaDao)(nil).Commit), arg0)
}

// Destruct mocks base method
func (m *MockQaDao) Destruct() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destruct")
}

// Destruct indicates an expected call of Destruct
func (mr *MockQaDaoMockRecorder) Destruct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destruct", reflect.TypeOf((*MockQaDao)(nil).Destruct))
}

// FindDetails mocks base method
func (m *MockQaDao) FindDetails(arg0 dao.TransactionContext, arg1 []entity.Questions) []entity.QuestionDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDetails", arg0, arg1)
	ret0, _ := ret[0].([]entity.QuestionDetails)
	return ret0
}

// FindDetails indicates an expected call of FindDetails
func (mr *MockQaDaoMockRecorder) FindDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDetails", reflect.TypeOf((*MockQaDao)(nil).FindDetails), arg0, arg1)
}

// GetBannedWords mocks base method
func (m *MockQaDao) GetBannedWords(arg0 dao.TransactionContext) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBannedWords", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBannedWords indicates an expected call of GetBannedWords
func (mr *MockQaDaoMockRecorder) GetBannedWords(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBannedWords", reflect.TypeOf((*MockQaDao)(nil).GetBannedWords), arg0)
}

// Init mocks base method
func (m *MockQaDao) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockQaDaoMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockQaDao)(nil).Init))
}

// MainPage mocks base method
func (m *MockQaDao) MainPage(arg0 dao.TransactionContext, arg1, arg2 int64) ([]entity.Questions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MainPage", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.Questions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MainPage indicates an expected call of MainPage
func (mr *MockQaDaoMockRecorder) MainPage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MainPage", reflect.TypeOf((*MockQaDao)(nil).MainPage), arg0, arg1, arg2)
}

// MakeLabels mocks base method
func (m *MockQaDao) MakeLabels(arg0 dao.TransactionContext, arg1 []string) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeLabels", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeLabels indicates an expected call of MakeLabels
func (mr *MockQaDaoMockRecorder) MakeLabels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeLabels", reflect.TypeOf((*MockQaDao)(nil).MakeLabels), arg0, arg1)
}

// ModifyQuestion mocks base method
func (m *MockQaDao) ModifyQuestion(arg0 dao.TransactionContext, arg1 int64, arg2, arg3, arg4 string, arg5 []string, arg6, arg7 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyQuestion", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyQuestion indicates an expected call of ModifyQuestion
func (mr *MockQaDaoMockRecorder) ModifyQuestion(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyQuestion", reflect.TypeOf((*MockQaDao)(nil).ModifyQuestion), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// Rollback mocks base method
func (m *MockQaDao) Rollback(arg0 *dao.TransactionContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockQaDaoMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockQaDao)(nil).Rollback), arg0)
}
