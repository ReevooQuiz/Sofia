// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SKFE396/qa-service/dao (interfaces: QaDao)

// Package mock is a generated GoMock package.
package mock

import (
	dao "github.com/SKFE396/qa-service/dao"
	entity "github.com/SKFE396/qa-service/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQaDao is a mock of QaDao interface
type MockQaDao struct {
	ctrl     *gomock.Controller
	recorder *MockQaDaoMockRecorder
}

// MockQaDaoMockRecorder is the mock recorder for MockQaDao
type MockQaDaoMockRecorder struct {
	mock *MockQaDao
}

// NewMockQaDao creates a new mock instance
func NewMockQaDao(ctrl *gomock.Controller) *MockQaDao {
	mock := &MockQaDao{ctrl: ctrl}
	mock.recorder = &MockQaDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQaDao) EXPECT() *MockQaDaoMockRecorder {
	return m.recorder
}

// AddAnswer mocks base method
func (m *MockQaDao) AddAnswer(arg0 dao.TransactionContext, arg1, arg2 int64, arg3, arg4, arg5 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnswer", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAnswer indicates an expected call of AddAnswer
func (mr *MockQaDaoMockRecorder) AddAnswer(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnswer", reflect.TypeOf((*MockQaDao)(nil).AddAnswer), arg0, arg1, arg2, arg3, arg4, arg5)
}

// AddComment mocks base method
func (m *MockQaDao) AddComment(arg0 dao.TransactionContext, arg1, arg2 int64, arg3 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment
func (mr *MockQaDaoMockRecorder) AddComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockQaDao)(nil).AddComment), arg0, arg1, arg2, arg3)
}

// AddCriticism mocks base method
func (m *MockQaDao) AddCriticism(arg0 dao.TransactionContext, arg1, arg2 int64, arg3 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCriticism", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCriticism indicates an expected call of AddCriticism
func (mr *MockQaDaoMockRecorder) AddCriticism(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCriticism", reflect.TypeOf((*MockQaDao)(nil).AddCriticism), arg0, arg1, arg2, arg3)
}

// AddQuestion mocks base method
func (m *MockQaDao) AddQuestion(arg0 dao.TransactionContext, arg1 int64, arg2, arg3, arg4 string, arg5 []string, arg6, arg7 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuestion", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuestion indicates an expected call of AddQuestion
func (mr *MockQaDaoMockRecorder) AddQuestion(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuestion", reflect.TypeOf((*MockQaDao)(nil).AddQuestion), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// Begin mocks base method
func (m *MockQaDao) Begin(arg0 bool) (dao.TransactionContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", arg0)
	ret0, _ := ret[0].(dao.TransactionContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin
func (mr *MockQaDaoMockRecorder) Begin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockQaDao)(nil).Begin), arg0)
}

// CheckAnswerOwner mocks base method
func (m *MockQaDao) CheckAnswerOwner(arg0 dao.TransactionContext, arg1, arg2 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAnswerOwner", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAnswerOwner indicates an expected call of CheckAnswerOwner
func (mr *MockQaDaoMockRecorder) CheckAnswerOwner(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAnswerOwner", reflect.TypeOf((*MockQaDao)(nil).CheckAnswerOwner), arg0, arg1, arg2)
}

// CheckQuestionOwner mocks base method
func (m *MockQaDao) CheckQuestionOwner(arg0 dao.TransactionContext, arg1, arg2 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckQuestionOwner", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckQuestionOwner indicates an expected call of CheckQuestionOwner
func (mr *MockQaDaoMockRecorder) CheckQuestionOwner(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckQuestionOwner", reflect.TypeOf((*MockQaDao)(nil).CheckQuestionOwner), arg0, arg1, arg2)
}

// Commit mocks base method
func (m *MockQaDao) Commit(arg0 *dao.TransactionContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockQaDaoMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockQaDao)(nil).Commit), arg0)
}

// Destruct mocks base method
func (m *MockQaDao) Destruct() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destruct")
}

// Destruct indicates an expected call of Destruct
func (mr *MockQaDaoMockRecorder) Destruct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destruct", reflect.TypeOf((*MockQaDao)(nil).Destruct))
}

// FindAnswerById mocks base method
func (m *MockQaDao) FindAnswerById(arg0 dao.TransactionContext, arg1 int64) ([]entity.Answers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAnswerById", arg0, arg1)
	ret0, _ := ret[0].([]entity.Answers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAnswerById indicates an expected call of FindAnswerById
func (mr *MockQaDaoMockRecorder) FindAnswerById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAnswerById", reflect.TypeOf((*MockQaDao)(nil).FindAnswerById), arg0, arg1)
}

// FindAnswerDetails mocks base method
func (m *MockQaDao) FindAnswerDetails(arg0 dao.TransactionContext, arg1 []entity.Answers) []entity.AnswerDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAnswerDetails", arg0, arg1)
	ret0, _ := ret[0].([]entity.AnswerDetails)
	return ret0
}

// FindAnswerDetails indicates an expected call of FindAnswerDetails
func (mr *MockQaDaoMockRecorder) FindAnswerDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAnswerDetails", reflect.TypeOf((*MockQaDao)(nil).FindAnswerDetails), arg0, arg1)
}

// FindCommentDetails mocks base method
func (m *MockQaDao) FindCommentDetails(arg0 dao.TransactionContext, arg1 []entity.Comments) []entity.CommentDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCommentDetails", arg0, arg1)
	ret0, _ := ret[0].([]entity.CommentDetails)
	return ret0
}

// FindCommentDetails indicates an expected call of FindCommentDetails
func (mr *MockQaDaoMockRecorder) FindCommentDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCommentDetails", reflect.TypeOf((*MockQaDao)(nil).FindCommentDetails), arg0, arg1)
}

// FindCriticismDetails mocks base method
func (m *MockQaDao) FindCriticismDetails(arg0 dao.TransactionContext, arg1 []entity.Criticisms) []entity.CriticismDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCriticismDetails", arg0, arg1)
	ret0, _ := ret[0].([]entity.CriticismDetails)
	return ret0
}

// FindCriticismDetails indicates an expected call of FindCriticismDetails
func (mr *MockQaDaoMockRecorder) FindCriticismDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCriticismDetails", reflect.TypeOf((*MockQaDao)(nil).FindCriticismDetails), arg0, arg1)
}

// FindQuestionAnswers mocks base method
func (m *MockQaDao) FindQuestionAnswers(arg0 dao.TransactionContext, arg1, arg2 int64, arg3 int8) ([]entity.Answers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindQuestionAnswers", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]entity.Answers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindQuestionAnswers indicates an expected call of FindQuestionAnswers
func (mr *MockQaDaoMockRecorder) FindQuestionAnswers(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindQuestionAnswers", reflect.TypeOf((*MockQaDao)(nil).FindQuestionAnswers), arg0, arg1, arg2, arg3)
}

// FindQuestionById mocks base method
func (m *MockQaDao) FindQuestionById(arg0 dao.TransactionContext, arg1 int64) ([]entity.Questions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindQuestionById", arg0, arg1)
	ret0, _ := ret[0].([]entity.Questions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindQuestionById indicates an expected call of FindQuestionById
func (mr *MockQaDaoMockRecorder) FindQuestionById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindQuestionById", reflect.TypeOf((*MockQaDao)(nil).FindQuestionById), arg0, arg1)
}

// FindQuestionDetails mocks base method
func (m *MockQaDao) FindQuestionDetails(arg0 dao.TransactionContext, arg1 []entity.Questions) []entity.QuestionDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindQuestionDetails", arg0, arg1)
	ret0, _ := ret[0].([]entity.QuestionDetails)
	return ret0
}

// FindQuestionDetails indicates an expected call of FindQuestionDetails
func (mr *MockQaDaoMockRecorder) FindQuestionDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindQuestionDetails", reflect.TypeOf((*MockQaDao)(nil).FindQuestionDetails), arg0, arg1)
}

// GetAnswerActionInfos mocks base method
func (m *MockQaDao) GetAnswerActionInfos(arg0 dao.TransactionContext, arg1 int64, arg2, arg3 []int64) ([]dao.AnswerActionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnswerActionInfos", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]dao.AnswerActionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnswerActionInfos indicates an expected call of GetAnswerActionInfos
func (mr *MockQaDaoMockRecorder) GetAnswerActionInfos(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnswerActionInfos", reflect.TypeOf((*MockQaDao)(nil).GetAnswerActionInfos), arg0, arg1, arg2, arg3)
}

// GetBannedWords mocks base method
func (m *MockQaDao) GetBannedWords(arg0 dao.TransactionContext) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBannedWords", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBannedWords indicates an expected call of GetBannedWords
func (mr *MockQaDaoMockRecorder) GetBannedWords(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBannedWords", reflect.TypeOf((*MockQaDao)(nil).GetBannedWords), arg0)
}

// GetComments mocks base method
func (m *MockQaDao) GetComments(arg0 dao.TransactionContext, arg1, arg2 int64) ([]entity.Comments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.Comments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments
func (mr *MockQaDaoMockRecorder) GetComments(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockQaDao)(nil).GetComments), arg0, arg1, arg2)
}

// GetCriticisms mocks base method
func (m *MockQaDao) GetCriticisms(arg0 dao.TransactionContext, arg1, arg2 int64) ([]entity.Criticisms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCriticisms", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.Criticisms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCriticisms indicates an expected call of GetCriticisms
func (mr *MockQaDaoMockRecorder) GetCriticisms(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCriticisms", reflect.TypeOf((*MockQaDao)(nil).GetCriticisms), arg0, arg1, arg2)
}

// IncQuestionCount mocks base method
func (m *MockQaDao) IncQuestionCount(arg0 dao.TransactionContext, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncQuestionCount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncQuestionCount indicates an expected call of IncQuestionCount
func (mr *MockQaDaoMockRecorder) IncQuestionCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncQuestionCount", reflect.TypeOf((*MockQaDao)(nil).IncQuestionCount), arg0, arg1)
}

// IncUserAnswerCount mocks base method
func (m *MockQaDao) IncUserAnswerCount(arg0 dao.TransactionContext, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncUserAnswerCount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncUserAnswerCount indicates an expected call of IncUserAnswerCount
func (mr *MockQaDaoMockRecorder) IncUserAnswerCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncUserAnswerCount", reflect.TypeOf((*MockQaDao)(nil).IncUserAnswerCount), arg0, arg1)
}

// Init mocks base method
func (m *MockQaDao) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockQaDaoMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockQaDao)(nil).Init))
}

// MainPage mocks base method
func (m *MockQaDao) MainPage(arg0 dao.TransactionContext, arg1 int64, arg2 string, arg3 int64) ([]entity.Questions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MainPage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]entity.Questions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MainPage indicates an expected call of MainPage
func (mr *MockQaDaoMockRecorder) MainPage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MainPage", reflect.TypeOf((*MockQaDao)(nil).MainPage), arg0, arg1, arg2, arg3)
}

// MakeLabels mocks base method
func (m *MockQaDao) MakeLabels(arg0 dao.TransactionContext, arg1 []string) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeLabels", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeLabels indicates an expected call of MakeLabels
func (mr *MockQaDaoMockRecorder) MakeLabels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeLabels", reflect.TypeOf((*MockQaDao)(nil).MakeLabels), arg0, arg1)
}

// ModifyAnswer mocks base method
func (m *MockQaDao) ModifyAnswer(arg0 dao.TransactionContext, arg1 int64, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyAnswer", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyAnswer indicates an expected call of ModifyAnswer
func (mr *MockQaDaoMockRecorder) ModifyAnswer(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyAnswer", reflect.TypeOf((*MockQaDao)(nil).ModifyAnswer), arg0, arg1, arg2, arg3, arg4)
}

// ModifyQuestion mocks base method
func (m *MockQaDao) ModifyQuestion(arg0 dao.TransactionContext, arg1 int64, arg2, arg3, arg4 string, arg5 []string, arg6, arg7 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyQuestion", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyQuestion indicates an expected call of ModifyQuestion
func (mr *MockQaDaoMockRecorder) ModifyQuestion(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyQuestion", reflect.TypeOf((*MockQaDao)(nil).ModifyQuestion), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// Rollback mocks base method
func (m *MockQaDao) Rollback(arg0 *dao.TransactionContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockQaDaoMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockQaDao)(nil).Rollback), arg0)
}

// SaveAnswerSkeleton mocks base method
func (m *MockQaDao) SaveAnswerSkeleton(arg0 dao.TransactionContext, arg1 entity.Answers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAnswerSkeleton", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAnswerSkeleton indicates an expected call of SaveAnswerSkeleton
func (mr *MockQaDaoMockRecorder) SaveAnswerSkeleton(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAnswerSkeleton", reflect.TypeOf((*MockQaDao)(nil).SaveAnswerSkeleton), arg0, arg1)
}

// SaveQuestionSkeleton mocks base method
func (m *MockQaDao) SaveQuestionSkeleton(arg0 dao.TransactionContext, arg1 entity.Questions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveQuestionSkeleton", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveQuestionSkeleton indicates an expected call of SaveQuestionSkeleton
func (mr *MockQaDaoMockRecorder) SaveQuestionSkeleton(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveQuestionSkeleton", reflect.TypeOf((*MockQaDao)(nil).SaveQuestionSkeleton), arg0, arg1)
}
