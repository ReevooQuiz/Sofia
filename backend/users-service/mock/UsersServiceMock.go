// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zhanghanchong/users-service/service (interfaces: UsersService)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	dao "github.com/zhanghanchong/users-service/dao"
	service "github.com/zhanghanchong/users-service/service"
	reflect "reflect"
)

// MockUsersService is a mock of UsersService interface
type MockUsersService struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServiceMockRecorder
}

// MockUsersServiceMockRecorder is the mock recorder for MockUsersService
type MockUsersServiceMockRecorder struct {
	mock *MockUsersService
}

// NewMockUsersService creates a new mock instance
func NewMockUsersService(ctrl *gomock.Controller) *MockUsersService {
	mock := &MockUsersService{ctrl: ctrl}
	mock.recorder = &MockUsersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsersService) EXPECT() *MockUsersServiceMockRecorder {
	return m.recorder
}

// Ban mocks base method
func (m *MockUsersService) Ban(arg0 string, arg1 service.ReqBan) (service.ResBan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ban", arg0, arg1)
	ret0, _ := ret[0].(service.ResBan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ban indicates an expected call of Ban
func (mr *MockUsersServiceMockRecorder) Ban(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ban", reflect.TypeOf((*MockUsersService)(nil).Ban), arg0, arg1)
}

// Banned mocks base method
func (m *MockUsersService) Banned(arg0 string, arg1 int64) (service.ResBanned, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Banned", arg0, arg1)
	ret0, _ := ret[0].(service.ResBanned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Banned indicates an expected call of Banned
func (mr *MockUsersServiceMockRecorder) Banned(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Banned", reflect.TypeOf((*MockUsersService)(nil).Banned), arg0, arg1)
}

// CheckSession mocks base method
func (m *MockUsersService) CheckSession(arg0 string) (service.ResCheckSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSession", arg0)
	ret0, _ := ret[0].(service.ResCheckSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSession indicates an expected call of CheckSession
func (mr *MockUsersServiceMockRecorder) CheckSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSession", reflect.TypeOf((*MockUsersService)(nil).CheckSession), arg0)
}

// CheckToken mocks base method
func (m *MockUsersService) CheckToken(arg0 string) (service.ResCheckToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckToken", arg0)
	ret0, _ := ret[0].(service.ResCheckToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckToken indicates an expected call of CheckToken
func (mr *MockUsersServiceMockRecorder) CheckToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckToken", reflect.TypeOf((*MockUsersService)(nil).CheckToken), arg0)
}

// Destruct mocks base method
func (m *MockUsersService) Destruct() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destruct")
}

// Destruct indicates an expected call of Destruct
func (mr *MockUsersServiceMockRecorder) Destruct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destruct", reflect.TypeOf((*MockUsersService)(nil).Destruct))
}

// Follow mocks base method
func (m *MockUsersService) Follow(arg0 string, arg1 int64, arg2 bool) (service.ResFollow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", arg0, arg1, arg2)
	ret0, _ := ret[0].(service.ResFollow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Follow indicates an expected call of Follow
func (mr *MockUsersServiceMockRecorder) Follow(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockUsersService)(nil).Follow), arg0, arg1, arg2)
}

// Followed mocks base method
func (m *MockUsersService) Followed(arg0 string, arg1 int64) (service.ResFollowed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Followed", arg0, arg1)
	ret0, _ := ret[0].(service.ResFollowed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Followed indicates an expected call of Followed
func (mr *MockUsersServiceMockRecorder) Followed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Followed", reflect.TypeOf((*MockUsersService)(nil).Followed), arg0, arg1)
}

// Followers mocks base method
func (m *MockUsersService) Followers(arg0 string, arg1 int64) (service.ResFollowers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Followers", arg0, arg1)
	ret0, _ := ret[0].(service.ResFollowers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Followers indicates an expected call of Followers
func (mr *MockUsersServiceMockRecorder) Followers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Followers", reflect.TypeOf((*MockUsersService)(nil).Followers), arg0, arg1)
}

// InfoList mocks base method
func (m *MockUsersService) InfoList(arg0 service.ReqInfoList) (service.ResInfoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfoList", arg0)
	ret0, _ := ret[0].(service.ResInfoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfoList indicates an expected call of InfoList
func (mr *MockUsersServiceMockRecorder) InfoList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoList", reflect.TypeOf((*MockUsersService)(nil).InfoList), arg0)
}

// Init mocks base method
func (m *MockUsersService) Init(arg0 ...dao.UsersDao) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Init", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockUsersServiceMockRecorder) Init(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockUsersService)(nil).Init), arg0...)
}

// Login mocks base method
func (m *MockUsersService) Login(arg0 service.ReqLogin) (service.ResLogin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(service.ResLogin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockUsersServiceMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUsersService)(nil).Login), arg0)
}

// Notifications mocks base method
func (m *MockUsersService) Notifications(arg0 string, arg1 int64) (service.ResNotifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notifications", arg0, arg1)
	ret0, _ := ret[0].(service.ResNotifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Notifications indicates an expected call of Notifications
func (mr *MockUsersServiceMockRecorder) Notifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notifications", reflect.TypeOf((*MockUsersService)(nil).Notifications), arg0, arg1)
}

// OAuthGithub mocks base method
func (m *MockUsersService) OAuthGithub(arg0, arg1 string) (service.ResOAuthGithub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OAuthGithub", arg0, arg1)
	ret0, _ := ret[0].(service.ResOAuthGithub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OAuthGithub indicates an expected call of OAuthGithub
func (mr *MockUsersServiceMockRecorder) OAuthGithub(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OAuthGithub", reflect.TypeOf((*MockUsersService)(nil).OAuthGithub), arg0, arg1)
}

// Passwd mocks base method
func (m *MockUsersService) Passwd(arg0 string, arg1 service.ReqPasswd) (service.ResPasswd, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Passwd", arg0, arg1)
	ret0, _ := ret[0].(service.ResPasswd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Passwd indicates an expected call of Passwd
func (mr *MockUsersServiceMockRecorder) Passwd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Passwd", reflect.TypeOf((*MockUsersService)(nil).Passwd), arg0, arg1)
}

// PublicInfoGet mocks base method
func (m *MockUsersService) PublicInfoGet(arg0 string, arg1 int64) (service.ResPublicInfoGet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicInfoGet", arg0, arg1)
	ret0, _ := ret[0].(service.ResPublicInfoGet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicInfoGet indicates an expected call of PublicInfoGet
func (mr *MockUsersServiceMockRecorder) PublicInfoGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicInfoGet", reflect.TypeOf((*MockUsersService)(nil).PublicInfoGet), arg0, arg1)
}

// PublicInfoPut mocks base method
func (m *MockUsersService) PublicInfoPut(arg0 string, arg1 service.ReqPublicInfoPut) (service.ResPublicInfoPut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicInfoPut", arg0, arg1)
	ret0, _ := ret[0].(service.ResPublicInfoPut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicInfoPut indicates an expected call of PublicInfoPut
func (mr *MockUsersServiceMockRecorder) PublicInfoPut(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicInfoPut", reflect.TypeOf((*MockUsersService)(nil).PublicInfoPut), arg0, arg1)
}

// RefreshToken mocks base method
func (m *MockUsersService) RefreshToken(arg0 service.ReqRefreshToken) (service.ResRefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", arg0)
	ret0, _ := ret[0].(service.ResRefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken
func (mr *MockUsersServiceMockRecorder) RefreshToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockUsersService)(nil).RefreshToken), arg0)
}

// Register mocks base method
func (m *MockUsersService) Register(arg0 service.ReqRegister) (service.ResRegister, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(service.ResRegister)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockUsersServiceMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUsersService)(nil).Register), arg0)
}

// UserAnswers mocks base method
func (m *MockUsersService) UserAnswers(arg0 string, arg1, arg2 int64) (service.ResUserAnswers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAnswers", arg0, arg1, arg2)
	ret0, _ := ret[0].(service.ResUserAnswers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAnswers indicates an expected call of UserAnswers
func (mr *MockUsersServiceMockRecorder) UserAnswers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAnswers", reflect.TypeOf((*MockUsersService)(nil).UserAnswers), arg0, arg1, arg2)
}

// UserQuestions mocks base method
func (m *MockUsersService) UserQuestions(arg0 string, arg1, arg2 int64) (service.ResUserQuestions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserQuestions", arg0, arg1, arg2)
	ret0, _ := ret[0].(service.ResUserQuestions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserQuestions indicates an expected call of UserQuestions
func (mr *MockUsersServiceMockRecorder) UserQuestions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserQuestions", reflect.TypeOf((*MockUsersService)(nil).UserQuestions), arg0, arg1, arg2)
}

// VerificationCode mocks base method
func (m *MockUsersService) VerificationCode(arg0 bool, arg1 string) (service.ResVerificationCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerificationCode", arg0, arg1)
	ret0, _ := ret[0].(service.ResVerificationCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerificationCode indicates an expected call of VerificationCode
func (mr *MockUsersServiceMockRecorder) VerificationCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerificationCode", reflect.TypeOf((*MockUsersService)(nil).VerificationCode), arg0, arg1)
}

// Verify mocks base method
func (m *MockUsersService) Verify(arg0 string, arg1 int64) (service.ResVerify, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1)
	ret0, _ := ret[0].(service.ResVerify)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify
func (mr *MockUsersServiceMockRecorder) Verify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockUsersService)(nil).Verify), arg0, arg1)
}

// WordBan mocks base method
func (m *MockUsersService) WordBan(arg0 string, arg1 service.ReqWordBan) (service.ResWordBan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WordBan", arg0, arg1)
	ret0, _ := ret[0].(service.ResWordBan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WordBan indicates an expected call of WordBan
func (mr *MockUsersServiceMockRecorder) WordBan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WordBan", reflect.TypeOf((*MockUsersService)(nil).WordBan), arg0, arg1)
}

// WordsBanned mocks base method
func (m *MockUsersService) WordsBanned(arg0 string, arg1 int64) (service.ResWordsBanned, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WordsBanned", arg0, arg1)
	ret0, _ := ret[0].(service.ResWordsBanned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WordsBanned indicates an expected call of WordsBanned
func (mr *MockUsersServiceMockRecorder) WordsBanned(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WordsBanned", reflect.TypeOf((*MockUsersService)(nil).WordsBanned), arg0, arg1)
}
