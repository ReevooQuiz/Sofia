// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zhanghanchong/users-service/service (interfaces: UsersService)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	dao "github.com/zhanghanchong/users-service/dao"
	service "github.com/zhanghanchong/users-service/service"
	reflect "reflect"
)

// MockUsersService is a mock of UsersService interface
type MockUsersService struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServiceMockRecorder
}

// MockUsersServiceMockRecorder is the mock recorder for MockUsersService
type MockUsersServiceMockRecorder struct {
	mock *MockUsersService
}

// NewMockUsersService creates a new mock instance
func NewMockUsersService(ctrl *gomock.Controller) *MockUsersService {
	mock := &MockUsersService{ctrl: ctrl}
	mock.recorder = &MockUsersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsersService) EXPECT() *MockUsersServiceMockRecorder {
	return m.recorder
}

// Destruct mocks base method
func (m *MockUsersService) Destruct() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destruct")
}

// Destruct indicates an expected call of Destruct
func (mr *MockUsersServiceMockRecorder) Destruct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destruct", reflect.TypeOf((*MockUsersService)(nil).Destruct))
}

// Init mocks base method
func (m *MockUsersService) Init(arg0 ...dao.UsersDao) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Init", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockUsersServiceMockRecorder) Init(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockUsersService)(nil).Init), arg0...)
}

// Login mocks base method
func (m *MockUsersService) Login(arg0 service.ReqLogin) (service.ResLogin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(service.ResLogin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockUsersServiceMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUsersService)(nil).Login), arg0)
}

// OAuthGithub mocks base method
func (m *MockUsersService) OAuthGithub(arg0, arg1 string) (service.ResOAuthGithub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OAuthGithub", arg0, arg1)
	ret0, _ := ret[0].(service.ResOAuthGithub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OAuthGithub indicates an expected call of OAuthGithub
func (mr *MockUsersServiceMockRecorder) OAuthGithub(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OAuthGithub", reflect.TypeOf((*MockUsersService)(nil).OAuthGithub), arg0, arg1)
}

// Passwd mocks base method
func (m *MockUsersService) Passwd(arg0 string, arg1 service.ReqPasswd) (service.ResPasswd, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Passwd", arg0, arg1)
	ret0, _ := ret[0].(service.ResPasswd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Passwd indicates an expected call of Passwd
func (mr *MockUsersServiceMockRecorder) Passwd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Passwd", reflect.TypeOf((*MockUsersService)(nil).Passwd), arg0, arg1)
}

// PublicInfoPut mocks base method
func (m *MockUsersService) PublicInfoPut(arg0 string, arg1 service.ReqPublicInfoPut) (service.ResPublicInfoPut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicInfoPut", arg0, arg1)
	ret0, _ := ret[0].(service.ResPublicInfoPut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicInfoPut indicates an expected call of PublicInfoPut
func (mr *MockUsersServiceMockRecorder) PublicInfoPut(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicInfoPut", reflect.TypeOf((*MockUsersService)(nil).PublicInfoPut), arg0, arg1)
}

// Register mocks base method
func (m *MockUsersService) Register(arg0 service.ReqRegister) (service.ResRegister, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(service.ResRegister)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockUsersServiceMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUsersService)(nil).Register), arg0)
}

// VerificationCode mocks base method
func (m *MockUsersService) VerificationCode(arg0 bool, arg1 string) (service.ResVerificationCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerificationCode", arg0, arg1)
	ret0, _ := ret[0].(service.ResVerificationCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerificationCode indicates an expected call of VerificationCode
func (mr *MockUsersServiceMockRecorder) VerificationCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerificationCode", reflect.TypeOf((*MockUsersService)(nil).VerificationCode), arg0, arg1)
}

// Verify mocks base method
func (m *MockUsersService) Verify(arg0 string, arg1 int64) (service.ResVerify, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1)
	ret0, _ := ret[0].(service.ResVerify)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify
func (mr *MockUsersServiceMockRecorder) Verify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockUsersService)(nil).Verify), arg0, arg1)
}
