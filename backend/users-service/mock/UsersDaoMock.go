// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zhanghanchong/users-service/dao (interfaces: UsersDao)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/zhanghanchong/users-service/entity"
	reflect "reflect"
)

// MockUsersDao is a mock of UsersDao interface
type MockUsersDao struct {
	ctrl     *gomock.Controller
	recorder *MockUsersDaoMockRecorder
}

// MockUsersDaoMockRecorder is the mock recorder for MockUsersDao
type MockUsersDaoMockRecorder struct {
	mock *MockUsersDao
}

// NewMockUsersDao creates a new mock instance
func NewMockUsersDao(ctrl *gomock.Controller) *MockUsersDao {
	mock := &MockUsersDao{ctrl: ctrl}
	mock.recorder = &MockUsersDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsersDao) EXPECT() *MockUsersDaoMockRecorder {
	return m.recorder
}

// Destruct mocks base method
func (m *MockUsersDao) Destruct() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destruct")
}

// Destruct indicates an expected call of Destruct
func (mr *MockUsersDaoMockRecorder) Destruct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destruct", reflect.TypeOf((*MockUsersDao)(nil).Destruct))
}

// FindByEmail mocks base method
func (m *MockUsersDao) FindByEmail(arg0 string) (entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", arg0)
	ret0, _ := ret[0].(entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail
func (mr *MockUsersDaoMockRecorder) FindByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUsersDao)(nil).FindByEmail), arg0)
}

// FindById mocks base method
func (m *MockUsersDao) FindById(arg0 int64) (entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById
func (mr *MockUsersDaoMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUsersDao)(nil).FindById), arg0)
}

// FindByUsername mocks base method
func (m *MockUsersDao) FindByUsername(arg0 string) (entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", arg0)
	ret0, _ := ret[0].(entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername
func (mr *MockUsersDaoMockRecorder) FindByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockUsersDao)(nil).FindByUsername), arg0)
}

// Init mocks base method
func (m *MockUsersDao) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockUsersDaoMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockUsersDao)(nil).Init))
}

// Insert mocks base method
func (m *MockUsersDao) Insert(arg0 entity.Users) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockUsersDaoMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUsersDao)(nil).Insert), arg0)
}

// Update mocks base method
func (m *MockUsersDao) Update(arg0 entity.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUsersDaoMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsersDao)(nil).Update), arg0)
}
