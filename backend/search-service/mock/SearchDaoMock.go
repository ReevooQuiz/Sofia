// Code generated by MockGen. DO NOT EDIT.
// Source: search-service/dao (interfaces: SearchDao)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	dao "github.com/SKFE396/search-service/dao"
	entity "github.com/SKFE396/search-service/entity"
)

// MockSearchDao is a mock of SearchDao interface
type MockSearchDao struct {
	ctrl     *gomock.Controller
	recorder *MockSearchDaoMockRecorder
}

// MockSearchDaoMockRecorder is the mock recorder for MockSearchDao
type MockSearchDaoMockRecorder struct {
	mock *MockSearchDao
}

// NewMockSearchDao creates a new mock instance
func NewMockSearchDao(ctrl *gomock.Controller) *MockSearchDao {
	mock := &MockSearchDao{ctrl: ctrl}
	mock.recorder = &MockSearchDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearchDao) EXPECT() *MockSearchDaoMockRecorder {
	return m.recorder
}

// Begin mocks base method
func (m *MockSearchDao) Begin(arg0 bool) (dao.TransactionContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", arg0)
	ret0, _ := ret[0].(dao.TransactionContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin
func (mr *MockSearchDaoMockRecorder) Begin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockSearchDao)(nil).Begin), arg0)
}

// Commit mocks base method
func (m *MockSearchDao) Commit(arg0 *dao.TransactionContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Commit", arg0)
}

// Commit indicates an expected call of Commit
func (mr *MockSearchDaoMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockSearchDao)(nil).Commit), arg0)
}

// Destruct mocks base method
func (m *MockSearchDao) Destruct() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destruct")
}

// Destruct indicates an expected call of Destruct
func (mr *MockSearchDaoMockRecorder) Destruct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destruct", reflect.TypeOf((*MockSearchDao)(nil).Destruct))
}

// FindAnswerSkeletons mocks base method
func (m *MockSearchDao) FindAnswerSkeletons(arg0 dao.TransactionContext, arg1 []entity.AnswerDetails) []entity.Answers {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAnswerSkeletons", arg0, arg1)
	ret0, _ := ret[0].([]entity.Answers)
	return ret0
}

// FindAnswerSkeletons indicates an expected call of FindAnswerSkeletons
func (mr *MockSearchDaoMockRecorder) FindAnswerSkeletons(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAnswerSkeletons", reflect.TypeOf((*MockSearchDao)(nil).FindAnswerSkeletons), arg0, arg1)
}

// FindQuestionDetails mocks base method
func (m *MockSearchDao) FindQuestionDetails(arg0 dao.TransactionContext, arg1 []entity.Questions) []entity.QuestionDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindQuestionDetails", arg0, arg1)
	ret0, _ := ret[0].([]entity.QuestionDetails)
	return ret0
}

// FindQuestionDetails indicates an expected call of FindQuestionDetails
func (mr *MockSearchDaoMockRecorder) FindQuestionDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindQuestionDetails", reflect.TypeOf((*MockSearchDao)(nil).FindQuestionDetails), arg0, arg1)
}

// GetAnswerActionInfos mocks base method
func (m *MockSearchDao) GetAnswerActionInfos(arg0 dao.TransactionContext, arg1 int64, arg2, arg3 []int64) ([]dao.AnswerActionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnswerActionInfos", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]dao.AnswerActionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnswerActionInfos indicates an expected call of GetAnswerActionInfos
func (mr *MockSearchDaoMockRecorder) GetAnswerActionInfos(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnswerActionInfos", reflect.TypeOf((*MockSearchDao)(nil).GetAnswerActionInfos), arg0, arg1, arg2, arg3)
}

// GetBannedWords mocks base method
func (m *MockSearchDao) GetBannedWords(arg0 dao.TransactionContext) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBannedWords", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBannedWords indicates an expected call of GetBannedWords
func (mr *MockSearchDaoMockRecorder) GetBannedWords(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBannedWords", reflect.TypeOf((*MockSearchDao)(nil).GetBannedWords), arg0)
}

// HotList mocks base method
func (m *MockSearchDao) HotList(arg0 dao.TransactionContext) ([]entity.Questions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HotList", arg0)
	ret0, _ := ret[0].([]entity.Questions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HotList indicates an expected call of HotList
func (mr *MockSearchDaoMockRecorder) HotList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HotList", reflect.TypeOf((*MockSearchDao)(nil).HotList), arg0)
}

// Init mocks base method
func (m *MockSearchDao) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockSearchDaoMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockSearchDao)(nil).Init))
}

// Rollback mocks base method
func (m *MockSearchDao) Rollback(arg0 *dao.TransactionContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback", arg0)
}

// Rollback indicates an expected call of Rollback
func (mr *MockSearchDaoMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockSearchDao)(nil).Rollback), arg0)
}

// Search mocks base method
func (m *MockSearchDao) Search(arg0 dao.TransactionContext, arg1 string) ([]dao.KListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].([]dao.KListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockSearchDaoMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearchDao)(nil).Search), arg0, arg1)
}

// SearchAnswers mocks base method
func (m *MockSearchDao) SearchAnswers(arg0 dao.TransactionContext, arg1 int64, arg2 string) ([]entity.AnswerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAnswers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.AnswerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAnswers indicates an expected call of SearchAnswers
func (mr *MockSearchDaoMockRecorder) SearchAnswers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAnswers", reflect.TypeOf((*MockSearchDao)(nil).SearchAnswers), arg0, arg1, arg2)
}

// SearchQuestions mocks base method
func (m *MockSearchDao) SearchQuestions(arg0 dao.TransactionContext, arg1 int64, arg2 string) ([]entity.Questions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchQuestions", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.Questions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchQuestions indicates an expected call of SearchQuestions
func (mr *MockSearchDaoMockRecorder) SearchQuestions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchQuestions", reflect.TypeOf((*MockSearchDao)(nil).SearchQuestions), arg0, arg1, arg2)
}

// SearchUsers mocks base method
func (m *MockSearchDao) SearchUsers(arg0 dao.TransactionContext, arg1 int64, arg2 string) ([]dao.SearchUserResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]dao.SearchUserResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUsers indicates an expected call of SearchUsers
func (mr *MockSearchDaoMockRecorder) SearchUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsers", reflect.TypeOf((*MockSearchDao)(nil).SearchUsers), arg0, arg1, arg2)
}
