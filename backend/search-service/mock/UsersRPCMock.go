// Code generated by MockGen. DO NOT EDIT.
// Source: search-service/rpc (interfaces: UsersRPC)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	rpc "search-service/rpc"
)

// MockUsersRPC is a mock of UsersRPC interface
type MockUsersRPC struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRPCMockRecorder
}

// MockUsersRPCMockRecorder is the mock recorder for MockUsersRPC
type MockUsersRPCMockRecorder struct {
	mock *MockUsersRPC
}

// NewMockUsersRPC creates a new mock instance
func NewMockUsersRPC(ctrl *gomock.Controller) *MockUsersRPC {
	mock := &MockUsersRPC{ctrl: ctrl}
	mock.recorder = &MockUsersRPCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsersRPC) EXPECT() *MockUsersRPCMockRecorder {
	return m.recorder
}

// GetUserInfos mocks base method
func (m *MockUsersRPC) GetUserInfos(arg0 []int64) ([]rpc.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfos", arg0)
	ret0, _ := ret[0].([]rpc.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfos indicates an expected call of GetUserInfos
func (mr *MockUsersRPCMockRecorder) GetUserInfos(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfos", reflect.TypeOf((*MockUsersRPC)(nil).GetUserInfos), arg0)
}

// ParseToken mocks base method
func (m *MockUsersRPC) ParseToken(arg0 string) (bool, int64, int8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(int8)
	return ret0, ret1, ret2
}

// ParseToken indicates an expected call of ParseToken
func (mr *MockUsersRPCMockRecorder) ParseToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockUsersRPC)(nil).ParseToken), arg0)
}
