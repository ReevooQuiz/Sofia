// Code generated by MockGen. DO NOT EDIT.
// Source: search-service/service (interfaces: SearchService)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	dao "search-service/dao"
	rpc "search-service/rpc"
)

// MockSearchService is a mock of SearchService interface
type MockSearchService struct {
	ctrl     *gomock.Controller
	recorder *MockSearchServiceMockRecorder
}

// MockSearchServiceMockRecorder is the mock recorder for MockSearchService
type MockSearchServiceMockRecorder struct {
	mock *MockSearchService
}

// NewMockSearchService creates a new mock instance
func NewMockSearchService(ctrl *gomock.Controller) *MockSearchService {
	mock := &MockSearchService{ctrl: ctrl}
	mock.recorder = &MockSearchServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearchService) EXPECT() *MockSearchServiceMockRecorder {
	return m.recorder
}

// Destruct mocks base method
func (m *MockSearchService) Destruct() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destruct")
}

// Destruct indicates an expected call of Destruct
func (mr *MockSearchServiceMockRecorder) Destruct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destruct", reflect.TypeOf((*MockSearchService)(nil).Destruct))
}

// HotList mocks base method
func (m *MockSearchService) HotList(arg0 string) (int8, interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HotList", arg0)
	ret0, _ := ret[0].(int8)
	ret1, _ := ret[1].(interface{})
	return ret0, ret1
}

// HotList indicates an expected call of HotList
func (mr *MockSearchServiceMockRecorder) HotList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HotList", reflect.TypeOf((*MockSearchService)(nil).HotList), arg0)
}

// Init mocks base method
func (m *MockSearchService) Init(arg0 dao.SearchDao, arg1 rpc.UsersRPC) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockSearchServiceMockRecorder) Init(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockSearchService)(nil).Init), arg0, arg1)
}

// Search mocks base method
func (m *MockSearchService) Search(arg0, arg1 string) (int8, interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(int8)
	ret1, _ := ret[1].(interface{})
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockSearchServiceMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearchService)(nil).Search), arg0, arg1)
}

// SearchAnswers mocks base method
func (m *MockSearchService) SearchAnswers(arg0 string, arg1 int64, arg2 string) (int8, interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAnswers", arg0, arg1, arg2)
	ret0, _ := ret[0].(int8)
	ret1, _ := ret[1].(interface{})
	return ret0, ret1
}

// SearchAnswers indicates an expected call of SearchAnswers
func (mr *MockSearchServiceMockRecorder) SearchAnswers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAnswers", reflect.TypeOf((*MockSearchService)(nil).SearchAnswers), arg0, arg1, arg2)
}

// SearchQuestions mocks base method
func (m *MockSearchService) SearchQuestions(arg0 string, arg1 int64, arg2 string) (int8, interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchQuestions", arg0, arg1, arg2)
	ret0, _ := ret[0].(int8)
	ret1, _ := ret[1].(interface{})
	return ret0, ret1
}

// SearchQuestions indicates an expected call of SearchQuestions
func (mr *MockSearchServiceMockRecorder) SearchQuestions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchQuestions", reflect.TypeOf((*MockSearchService)(nil).SearchQuestions), arg0, arg1, arg2)
}

// SearchUsers mocks base method
func (m *MockSearchService) SearchUsers(arg0 string, arg1 int64, arg2 string) (int8, interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].(int8)
	ret1, _ := ret[1].(interface{})
	return ret0, ret1
}

// SearchUsers indicates an expected call of SearchUsers
func (mr *MockSearchServiceMockRecorder) SearchUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsers", reflect.TypeOf((*MockSearchService)(nil).SearchUsers), arg0, arg1, arg2)
}
